#+TITLE:  TD 0 : Compilation, pointeur & références
#+AUTHOR: Xavier Garrido
#+DATE:   18/09/2013
#+OPTIONS: toc:nil ^:{}
#+LATEX_CLASS: lecture
#+LATEX_CLASS_OPTIONS: [10pt,a4paper,,cpp_teaching_classes]
#+LATEX_HEADER: \setcounter{chapter}{0}

* Compilation conditionnelle
Compiler le code suivant, sans puis avec les options de « warnings »

#+BEGIN_SRC c++
  #include <iostream>
  using namespace std;

  int main ()
  {
    unsigned int entierNonSigne;
    int entierSigne = entierNonSigne;

    cout << entierNonSigne << " " << entierSigne << endl;

    for (unsigned int iEntier = 0; iEntier < entierSigne; ++iEntier)
      cout << iEntier << endl;
  }
#+END_SRC

Avant exécution, corriger les « erreurs » puis tester le programme. Ajouter
finalement une directive de préprocesseur d'identificateur =DEBUG= permettant
l'affichage ou non des différentes valeurs d'entier et compiler suivant les deux
cas. S'assurer du résultat en précompilant le code source.

* Pointeurs & références

Créer un programme dans lequel vous déclarerez :

- un entier,
- une référence vers cet entier,
- un pointeur vers cet entier.

Vous afficherez la valeur et l'adresse de cette variable ainsi que la valeur
pointée.

* Opérateurs =new= et =delete=

Écrire en \Cpp, en utilisant les outils spécifiques à ce langage, les
instructions C suivantes :

#+BEGIN_SRC c++
  double * pt_tabular;
  int n_value;
  printf ("Combien de valeurs souhaitez vous allouer en mémoire ?");
  scanf ("%d", &n_value);
  pt_tabular = (double *) malloc (sizeof (double) * n_value);
  free (pt_tabular);
#+END_SRC

* Fonction & références

Écrire une fonction permettant d'échanger les contenus de 2 variables de type
=int= fournies en argument:

1. en transmettant l'adresse des variables concernées (seule méthode utilisable
   en C),
2. en utilisant la transmission par référence

Dans les deux cas, vous écrirez un programme d'essai de la fonction.
