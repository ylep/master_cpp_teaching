#+TITLE:  Fraction de nombres complexes
#+AUTHOR: Xavier Garrido
#+DATE:   18/09/2013
#+OPTIONS: toc:nil
#+LATEX_HEADER: \setcounter{chapter}{3}

* Classe =Complexe=

Écrire une classe =Complexe=, possédant :

- Deux membres de type =double= :

  - Partie réelle,
  - Partie imaginaire ;

- Un ou plusieurs constructeurs ;

- Une méthode =affiche= pour les tests ;

- Des méthodes d'accès : partie réelle, partie imaginaire, module, argument ;

- Des méthodes de modification : =set_real_imag(double, double)= et
  =set_mod_arg(double, double)= ;

- Une méthode retournant le conjugué.


Écrire ensuite les fonctions d'addition, soustraction, multiplication, et
division, suivant ce prototype :

#+BEGIN_SRC c++
  Complexe operation(const Complexe& z1, const Complexe& z2);
#+END_SRC


* Évolution de la classe =Complexe=

Faire évoluer la classe =Complexe=, *sans changer son interface publique*, en y
ajoutant deux membres de données :

  - Module,
  - Argument.

Ainsi, les méthodes d'accès au module et à l'argument seront plus rapide,
puisqu'il leur suffira de lire la valeur stockée, et non plus de recalculer à
la volée.

S'assurer que les constructeurs et toutes les méthodes de modification
préservent la synchronisation entre les quatre valeurs stockées.


* Opérateurs de la classe =Complexe=

Définissez les opérateurs pertinents de la classe =Complexe= :

#+BEGIN_SRC c++
  Complexe& Complexe::operator = (const Complexe&);

  Complexe operator + (const Complexe&, const Complexe&);
  Complexe operator - (const Complexe&, const Complexe&);
  Complexe operator * (const Complexe&, const Complexe&);
  Complexe operator / (const Complexe&, const Complexe&);

  Complexe& Complexe::operator += (const Complexe&);
  Complexe& Complexe::operator -= (const Complexe&);
  Complexe& Complexe::operator *= (const Complexe&);
  Complexe& Complexe::operator /= (const Complexe&);

  bool operator == (const Complexe&, const Complexe&);
  bool operator != (const Complexe&, const Complexe&);

  std::ostream& operator << (std::ostream&, const Complexe&);
#+END_SRC

* Classe =Fraction=

Sur le même modèle, écrire une classe =Fraction=, possédant :

- Deux membres entiers :

  - Numérateur,
  - Dénominateur ;

- Un ou plusieurs constructeurs ;

- Une méthode =affiche= pour les tests (qui affiche la fraction sous la forme
  Numérateur/Dénominateur /e.g./ 4/3) ;

- Des méthodes d'accès ;

- Une méthode de modification ;

- Une méthode retournant la fraction inverse (dénominateur / numérateur) ;

- Une méthode =reduire= : qui réduit la fraction /i.e./ 28/6 devient 14/3 ;

- =approx= : qui retourne la valeur approchée de la fraction par un =double=.


* Classe =FractionComplexe= :noexport:

Utiliser les deux classes précédentes pour afficher les fractions de complexes
sous la forme

\[
\frac{a_1 + i \times b_1}{a_2 + i \times b_2}
\]
