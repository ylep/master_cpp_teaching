#+TITLE:  C++ teaching courses of Master 1 - README
#+AUTHOR: Xavier Garrido

* Introduction

This repository contains materials for C++ lectures given in Master 1 of
Fundamental Physics at the University of Paris Sud. It provides slides, courses
as well as exercices and piece of code to illustrate the most fundamental ideas
behind C++ and the Object Oriented Programming.

* Installation

To use these materials you will need to install some dedicated LaTeX templates
independantly developed https://github.com/xgarrido/latex-templates. See the
README inside this github repository to know how to install them.

You will also need to install the proper Pygments style to match University of
Paris Sud colors. The repository address is
https://github.com/xgarrido/pygments-styles with the installation commands.

Given the succesful installation of the LaTeX templates + Pygments style, you
will need special =orgmode= settings to translate the =org= files into =pdf=
documents. All the needed code is embedded within this file in the next
section. There is no need to detangle this file since emacs will do it when you
will use the Makefile in the corresponding directories. So, next step will be to
do =make= within the courses directories.

* Orgmode settings
:PROPERTIES:
:TANGLE: README.el
:END:

** Requirements
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (require 'ox-beamer)
#+END_SRC
** Code blocks
This activates a number of widely used languages, you are encouraged to activate
more languages using the customize interface for the =org-babel-load-languages=
variable, or with an elisp form like the one below.  The customize interface of
=org-babel-load-languages= contains an up to date list of the currently
supported languages.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Default list of LaTeX packages
Only include one default package and remove all the crapppy stuff included by
=org= \rightarrow =latex= translation.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "org-preamble"))
#+END_SRC

** Defining =org-latex-classes=

#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
#+END_SRC

*** Beamer template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[c]{beamer}
                  [PACKAGES]
                  \\usepackage{custom-beamer}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

We also translate *bold* into beamer =structure= and underline into *bold*.
#+BEGIN_SRC emacs-lisp
  (defun sk-beamer-bold (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\structure" contents)))
  (defun sk-beamer-underline (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

  (add-to-list 'org-export-filter-bold-functions 'sk-beamer-bold)
  (add-to-list 'org-export-filter-underline-functions 'sk-beamer-underline)
#+END_SRC

We add the option =frame= to footnote to make sure the footnote appears at the
bottom of the frame.
#+BEGIN_SRC emacs-lisp
  (defun sk-beamer-footnote (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\footnote[frame]" contents)))
  (add-to-list 'org-export-filter-footnote-reference-functions 'sk-beamer-footnote)
#+END_SRC

We define a new environment for "colored" box
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-beamer-environments-extra
               '("cbox" "c" "\\begin{cbox}%o(%h)" "\\end{cbox}"))
#+END_SRC

*** Lecture template
#+BEGIN_SRC emacs-lisp :results none
  (add-to-list 'org-latex-classes
               '("lecture"
                 "\\documentclass{report}
                  [PACKAGES]
                  \\usepackage{lecture-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** =Minted= setup
Code fragments are syntax highlighted using [[https://code.google.com/p/minted/][minted]] LaTeX package

#+BEGIN_SRC emacs-lisp :results silent
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(;;("frame" "lines")
          ("fontsize" "\\footnotesize")
          ("samepage" "")
          ("xrightmargin" "0.5cm")
          ("xleftmargin"  "0.5cm")
          ))
#+END_SRC

** Set LaTeX command
#+BEGIN_SRC emacs-lisp
   (defun sk-latexmk-cmd (backend)
     "When exporting from .org with latex, automatically run latex,
        pdflatex, or xelatex as appropriate, using latexmk."
     (when (org-export-derived-backend-p backend 'latex)
       (let ((texcmd)))
       (setq texcmd "jobname=$(basename %f | sed 's/\.tex//');latexmk -xelatex -shell-escape -quiet %f && mkdir -p latex.d && mv ${jobname}.* latex.d/. && mv latex.d/${jobname}.{org,tex,pdf,fdb_latexmk} .")
       (setq org-latex-pdf-process (list texcmd))))
  (org-add-hook 'org-export-before-processing-hook 'sk-latexmk-cmd)
#+END_SRC
