#+TITLE:  C++ teaching courses of Master 1 - README
#+AUTHOR: Xavier Garrido

* Introduction

This repository contains materials for C++ lectures given in Master 1 of
Fundamental Physics at the University of Paris Sud. It provides slides, courses
as well as exercices and piece of code to illustrate the most fundamental ideas
behind C++ and the Object Oriented Programming.

* Installation

To use these materials you will need to install some dedicated LaTeX templates
independantly developed https://github.com/xgarrido/latex-templates. See the
README inside this github repository to know how to install them.

You will also need to install the proper Pygments style to match University of
Paris Sud colors. The repository address is
https://github.com/xgarrido/pygments-styles with the installation commands.

Given the succesful installation of the LaTeX templates + Pygments style, you
will need special =orgmode= settings to translate the =org= files into =pdf=
documents. All the needed code is embedded within this file in the next
section. There is no need to detangle this file since emacs will do it when you
will use the Makefile in the corresponding directories. So, next step will be to
do =make= within the courses directories.

* Orgmode settings
:PROPERTIES:
:TANGLE: README.el
:END:
** Settings for =org= to =pdf= conversion
*** Requirements
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (require 'ox-beamer)
#+END_SRC
*** Place table caption below table
#+BEGIN_SRC emacs-lisp
  (setq org-latex-table-caption-above nil)
#+END_SRC
*** Code blocks
This activates a number of widely used languages, you are encouraged to activate
more languages using the customize interface for the =org-babel-load-languages=
variable, or with an elisp form like the one below.  The customize interface of
=org-babel-load-languages= contains an up to date list of the currently
supported languages.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Default list of LaTeX packages
Only include one default package and remove all the crapppy stuff included by
=org= \rightarrow =latex= translation.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "org-preamble"))
#+END_SRC

*** Defining =org-latex-classes=

#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
#+END_SRC

**** Beamer template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[c]{beamer}
                  [PACKAGES]
                  \\usepackage{custom-beamer}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

We also translate *bold* into beamer =structure= and underline into *bold*.
#+BEGIN_SRC emacs-lisp
  (defun cpp-beamer-bold (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\structure" contents)))
  (defun cpp-beamer-underline (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

  (add-to-list 'org-export-filter-bold-functions 'cpp-beamer-bold)
  (add-to-list 'org-export-filter-underline-functions 'cpp-beamer-underline)
#+END_SRC

We add the option =frame= to footnote to make sure the footnote appears at the
bottom of the frame.
#+BEGIN_SRC emacs-lisp
  (defun sk-beamer-footnote (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\footnote[frame]" contents)))
  (add-to-list 'org-export-filter-footnote-reference-functions 'sk-beamer-footnote)
#+END_SRC

We define a new environment for "colored" box
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-beamer-environments-extra
               '("cbox" "c" "\\begin{cbox}%o(%h)" "\\end{cbox}"))
#+END_SRC

**** Lecture template
#+BEGIN_SRC emacs-lisp :results none
  (add-to-list 'org-latex-classes
               '("lecture"
                 "\\documentclass{report}
                  [PACKAGES]
                  \\usepackage{lecture-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

*** =minted= setup
Code fragments are syntax highlighted using [[https://code.google.com/p/minted/][minted]] LaTeX package

#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(;;("frame" "lines")
          ("fontsize" "\\footnotesize")
          ("samepage" "")
          ("mathescape" "")
          ("xrightmargin" "0.5cm")
          ("xleftmargin"  "0.5cm")
          ))
#+END_SRC

*** Set LaTeX command
#+BEGIN_SRC emacs-lisp
   (defun sk-latexmk-cmd (backend)
     "When exporting from .org with latex, automatically run latex,
        pdflatex, or xelatex as appropriate, using latexmk."
     (when (org-export-derived-backend-p backend 'latex)
       (let ((texcmd)))
       (setq texcmd "jobname=$(basename %f | sed 's/\.tex//');latexmk -xelatex -shell-escape -quiet %f && mkdir -p latex.d && mv ${jobname}.* latex.d/. && mv latex.d/${jobname}.{org,tex,pdf,fdb_latexmk} .")
       (setq org-latex-pdf-process (list texcmd))))
  (org-add-hook 'org-export-before-processing-hook 'sk-latexmk-cmd)
#+END_SRC
** Settings for =org= to =html= conversion
*** Requirements
#+BEGIN_SRC emacs-lisp
  (require 'ox-html)
#+END_SRC
*** Building html preamble
#+TBLNAME: lecture_list :results none
|----------------------------+------------------------------------------------------|
| lecture_pointeur           | Pointeurs, références & allocation dynamique         |
| lecture_fonction           | Rappels sur les fonctions                            |
| lecture_specificite_c++    | Les spécificités du C++                              |
| lecture_struct_class       | Structures et classes                                |
| lecture_encapsulation      | Encapsulation des données                            |
| lecture_constructeur       | Notions de constructeur et de destructeur            |
| lecture_amitie             | Fonctions et classes amies                           |
| lecture_surcharge          | Surcharge d'opérateur                                |
| lecture_heritage           | Héritage                                             |
| lecture_template           | Notions de patrons de fonctions et de classes        |
| lecture_librairie_standard | Introduction à la librairie standard STL             |
| annexe_compilation         | Compilation et directives de préprocesseur           |
| annexe_convention_ecriture | Convention d'écriture et organisation des programmes |
| annexe_cout_cin            | Écriture/lecture sur l'entrée/sortie standard        |
| annexe_variable_statique   | Les membres données statiques                        |
| annexe_enum_typedef        | L'énumération enum & Utilisation de typedef          |
|----------------------------+------------------------------------------------------|

#+NAME: html-preamble
#+HEADERS: :var list=""
#+BEGIN_SRC sh :tangle no :results output
  dummy=true
  for f in $list
  do
      if [[ $f == *lecture_* ]]; then
          preamble+='<a href=\"'$f'.html\">'
      elif [[ $f == *annexe_* ]]; then
          if $dummy; then preamble+='<hr/>';fi
          preamble+='<a href=\"'$f'.html\">'
          dummy=false
      else
          preamble+=$f' '
      fi
  done
  preamble+='</a>'
  echo -ne $preamble
#+END_SRC
*** Define =org-project=
#+BEGIN_SRC emacs-lisp :noweb yes
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))

  (setq org-html-style-default "")
  (setq org-html-htmlize-output-type 'css)

  (let* ((this-dir (file-name-directory (or load-file-name buffer-file-name))))
    (add-to-list
     'org-publish-project-alist
     `("cpp"
       :base-directory ,this-dir
       :recursive t
       :exclude "README.org"
       :html-extension "html"
       :base-extension "org"
       :publishing-directory ,(expand-file-name "doc" this-dir)
       :publishing-function org-html-publish-to-html
       :section-numbers nil
       :html-head "<link rel=\"stylesheet\" href=\"../stylesheets/styles.css\">
                   <link rel=\"stylesheet\" href=\"../stylesheets/org-pygments.css\">"
       :html-preamble "<<html-preamble(lecture_list)>>"
       :html-postamble nil))
    (add-to-list
     'org-publish-project-alist
     `("cpp-images"
       :base-directory ,this-dir
       :base-extension "svg\\|png\\|jpg\\|gif\\|"
       :publishing-directory ,(expand-file-name "doc" this-dir)
       :recursive t
       :publishing-function org-publish-attachment))
     )

  (defun cpp-filter-latex-fragment (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string "\\\\Cpp" "C++" contents)))
  (add-to-list 'org-export-filter-latex-fragment-functions 'cpp-filter-latex-fragment)
  (defun cpp-filter-link (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string ".pdf" ".html" contents)))
  (add-to-list 'org-export-filter-link-functions 'cpp-filter-link)
  (defun cpp-filter-headline (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string "</h1>" "</h1><hr/>" contents)))
  (add-to-list 'org-export-filter-final-output-functions 'cpp-filter-headline)
#+END_SRC
*** Publish =cpp= project
#+BEGIN_SRC emacs-lisp
  (defun org-publish-cpp ()
    (progn
      (org-publish-project "cpp" 'force)
      (org-publish-project "cpp-images" 'force)))
#+END_SRC

*** Define a =by-backend= macro to deal with =tikzpicture= inclusion
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (setq org-babel-latex-htlatex "htlatex")
  (defmacro by-backend (&rest body)
    `(case (if (boundp 'backend) (org-export-backend-name backend) nil) ,@body))
#+END_SRC
*** CSS stylesheets
**** Main stylesheets
:PROPERTIES:
:TANGLE: doc/stylesheets/styles.css
:END:
***** Google fonts
#+BEGIN_SRC css
  @import url(https://fonts.googleapis.com/css?family=Lato:300italic,700italic,300,700);
  @import url(https://fonts.googleapis.com/css?family=Inconsolata);
  @import url(https://fonts.googleapis.com/css?family=Lobster);
#+END_SRC

***** Other stuff
#+BEGIN_SRC css
  body {
      width:860px;
      margin:0 auto;
      padding:50px;
      font:14px/1.5 Lato, "Helvetica Neue", Helvetica, Arial, sans-serif;
      color:#777;
      font-weight:300;
  }

  h1, h2, h3, h4, h5, h6 {
      color:#222;
      margin:0 0 20px;
  }

  p, ul, ol, table, pre, dl {
      margin:0 0 20px;
  }

  h1, h2, h3 {
      line-height:1.1;
  }

  h1 {
      /*font-family:Lobster;*/
      font-size:28px;
  }

  h2 {
      color:#393939;
  }

  h3, h4, h5, h6 {
      color:#494949;
  }

  a {
      color:#39c;
      font-weight:400;
      text-decoration:none;
  }

  a:hover {
      color:#069;
  }

  a small {
      font-size:11px;
      color:#777;
      margin-top:-0.6em;
      display:block;
  }

  a:hover small {
      color:#777;
  }

  blockquote, .remark {
      border-left:1px solid #e5e5e5;
      margin:0;
      padding:0 0 0 20px;
      font-style:italic;
  }

  code, pre, .prompt {
      font-family:Inconsolata, Monaco, Bitstream Vera Sans Mono, Lucida Console, Terminal;
      color:#777;
      font-size:12px;
  }

  pre {
      padding:8px 15px;
      background: #f8f8f8;
      border-radius:5px;
      border:1px solid #e5e5e5;
      overflow-x: auto;
  }

  .prompt {
      margin-bottom:15px;
      padding:8px 15px;
      background: #777;
      color:#e5e5e5;
      border-radius:5px;
      border:1px solid #e5e5e5;
      overflow-x: auto;
  }

  .prompt p {
      margin:0;
  }

  .prompt p:before {
      content: "$";
  }

  table {
      width:80%;
      border-collapse:collapse;
      margin-left: auto;
      margin-right: auto;
  }

  .table-number {
      font-weight: bold;
  }

  th, td {
      text-align:left;
      padding:5px 10px;
      border-bottom:1px solid #e5e5e5;
  }

  dt {
      color:#444;
      font-weight:700;
  }

  th {
      color:#444;
  }

  img {
      max-width:100%;
  }

  header {
      width:270px;
      float:left;
      position:fixed;
  }

  header ul {
      list-style:none;
      height:40px;

      padding:0;

      background: #eee;
      background: -moz-linear-gradient(top, #f8f8f8 0%, #dddddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f8f8f8), color-stop(100%,#dddddd));
      background: -webkit-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -o-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -ms-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: linear-gradient(top, #f8f8f8 0%,#dddddd 100%);

      border-radius:5px;
      border:1px solid #d2d2d2;
      box-shadow:inset #fff 0 1px 0, inset rgba(0,0,0,0.03) 0 -1px 0;
      width:270px;
  }

  header li {
      width:89px;
      float:left;
      border-right:1px solid #d2d2d2;
      height:40px;
  }

  header li:first-child a {
      border-radius:5px 0 0 5px;
  }

  header li:last-child a {
      border-radius:0 5px 5px 0;
  }

  header ul a {
      line-height:1;
      font-size:11px;
      color:#999;
      display:block;
      text-align:center;
      padding-top:6px;
      height:34px;
  }

  header ul a:hover {
      color:#999;
      background: -moz-linear-gradient(top, #fff 0%, #ddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#fff), color-stop(100%,#ddd));
      background: -webkit-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -o-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -ms-linear-gradient(top, #fff 0%,#ddd 100%);
      background: linear-gradient(top, #fff 0%,#ddd 100%);
  }

  header ul a:active {
      -webkit-box-shadow: inset 0px 2px 2px 0px #ddd;
      -moz-box-shadow: inset 0px 2px 2px 0px #ddd;
      box-shadow: inset 0px 2px 2px 0px #ddd;
  }

  strong {
      color:#222;
      font-weight:700;
  }

  header ul li + li {
      width:88px;
      border-left:1px solid #fff;
  }

  header ul li + li + li {
      border-right:none;
      width:89px;
  }

  header ul a strong {
      font-size:14px;
      display:block;
      color:#222;
  }

  #content {
      width:600px;
      float:right;
      padding-bottom:50px;
      /* border:1px solid #e5e5e5; */
      /* border-width:1px 0;       */
      /* padding:20px 0;           */
      /* margin:0 0 20px;          */
  }

  small {
      font-size:11px;
  }

  hr {
      border:0;
      background:#e5e5e5;
      height:1px;
      margin:0 0 20px;
  }

  footer {
      width:270px;
      float:left;
      position:fixed;
      bottom:50px;
  }

  #preamble {
      font-size:0.8em;
      text-transform:uppercase;
      float:left;
      margin-left:0em;
      width:20em;
      text-align:right;
      position:fixed;
  }

  #preamble hr {
      margin:0 0 0px;
  }

  #preamble a {
      display:block;
      padding:0.2em 1em;
      color:#39c;
  }

  #preamble a:hover {
      background-color:#39c;
      text-decoration:none;
      color:#f9f9f9;
      -webkit-transition:color .2s linear;
  }

  .center {
      text-align : center;
  }

  .footpara {
      display: inline;
  }

  @media print, screen and (max-width: 960px) {

      body {
          width:auto;
          margin:0;
      }

      header, content, footer {
          float:none;
          position:static;
          width:auto;
      }

      header {
          padding-right:320px;
      }

      header a small {
          display:inline;
      }

      header ul {
          position:absolute;
          right:50px;
          top:52px;
      }
  }

  @media print, screen and (max-width: 720px) {
      body {
          word-wrap:break-word;
      }

      header {
          padding:0;
      }

      header ul, header p.view {
          position:static;
      }

      pre, code {
          word-wrap:normal;
      }
  }

  @media print, screen and (max-width: 480px) {
      body {
          padding:15px;
      }

      header ul {
          display:none;
      }
  }

  @media print {
      body {
          padding:0.4in;
          font-size:12pt;
          color:#444;
      }
  }
#+END_SRC

**** Org source code styles
:PROPERTIES:
:TANGLE:   doc/stylesheets/org-pygments.css
:END:

#+BEGIN_SRC css
  .org-preprocessor {
      color: #84B818;
  }

  .org-string,
  .org-type {
      color: #DEB542;
  }

  .org-builtin,
  .org-variable-name,
  .org-constant,
  .org-function-name {
      color: #69B7F0;
  }

  .org-comment,
  .org-comment-delimiter,
  .org-doc {
      color: #93a1a1;
  }

  .org-keyword {
      color: #D33682;
  }

  pre {
      color: #777777;
  }
#+END_SRC
