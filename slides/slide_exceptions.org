#+TITLE:  Gestion des erreurs
#+AUTHOR: Yann Leprince
#+DATE:   25/11/2013
#+OPTIONS: toc:nil ^:{}
#+STARTUP:     beamer
#+LATEX_CLASS: cpp-slide

* Que faire en cas d'erreur ?

#+BEGIN_SRC c++
  int main()
  {
    Vecteur v(3);
    std::cout << v.get(5) << std::endl;
  }
#+END_SRC

#+BEAMER: \setbeamercovered{invisible}
#+BEAMER: \pause

- Ignorer l'erreur et laisser le programme continuer

- Quitter brutalement le programme avec un message d'erreur

- Signaler l'erreur à l'appelant

  - Retourner une valeur « sentinelle »

  - Déclencher une *exception*


* Ignorer l'erreur

#+BEGIN_SRC c++
  double Vecteur::get_unchecked(const unsigned int i) const
  {
    return m_table[i];
  }
#+END_SRC

- moindre effort

- rapide : pas de test

- comportement imprévisible
  #+BEAMER: \setbeamercovered{invisible}
  #+BEAMER: \pause
  - Erreur de segmentation

  - Introduction de données erronées : _GRAVE_

* Quitter le programme

#+BEGIN_SRC c++
  #include <iostream>
  #include <cstdlib>
  double Vecteur::get_abort(const unsigned int i) const
  {
    if(i < size())
      return m_table[i];
    else {
      std::cerr << "Dépassement de tableau" << std::endl;
      std::abort();
    }
  }
#+END_SRC

#+BEAMER: \setbeamercovered{invisible}
#+BEAMER: \pause

- Évite de poursuivre avec des données erronées

- Ne laisse pas la possibilité de détecter et corriger l'erreur

* Assertions

#+BEGIN_SRC c++
  #include <cassert>
  double Vecteur::get_assert(const unsigned int i) const
  {
    assert(i < size());
    return m_table[i];
  }
#+END_SRC

- En « mode debug » (par défaut) :

  - effectue le test et quitte le programme si la condition est =false=

- En « mode release » :

  - ne fait rien : le test est ignoré

  - activé par =g++ -DNDEBUG=

Attention les assertions ne doivent pas avoir d'effets de bord.

* Retourner une valeur « sentinelle »

#+BEGIN_SRC c++
  double Vecteur::get_sentinel(const unsigned int i,
                               const double sentinel) const
  {
    if(i < size())
      return m_table[i];
    else
      return sentinel;
  }
#+END_SRC

#+BEAMER: \setbeamercovered{invisible}
#+BEAMER: \pause

- Laisse à l'appelant la possibilité de détecter et corriger l'erreur

- Possibilité d'utiliser =NaN= (Not-a-Number) avec =float= ou =double=

  #+BEGIN_SRC c++
    std::numeric_limits<double>::quiet_NaN()
  #+END_SRC

- Il n'est pas toujours possible ni pratique de définir une valeur sentinelle :

  - Si une case du tableau contient la valeur sentinelle ?

  - Dans une fonction retournant =void= ?

* Signaler l'erreur par une exception

#+BEGIN_SRC c++
  #include <stdexcept>
  double Vecteur::get_exception(const unsigned int i) const
  {
    if(i < size())
      return m_table[i];
    else
      throw std::out_of_range("vector size exceeded");
  }
#+END_SRC

- Laisse à l'appelant la possibilité de détecter et corriger l'erreur

- Peut être utilisé quel que soit le contexte


* Traitement des exceptions

#+BEGIN_SRC c++
  #include <stdexcept>
  double Vecteur::get(const unsigned int i) const
  {
    if(i < size())
      return m_table[i];
    else
      throw std::out_of_range("vector size exceeded");
  }
#+END_SRC

#+BEGIN_SRC c++
  int main()
  {
    Vecteur v(3);
    std::cout << v.get(5) << std::endl;
  }
#+END_SRC

#+BEGIN_EXAMPLE
  terminate called after throwing an instance of 'std::out_of_range'
    what():  vector size exceeded
#+END_EXAMPLE

- Le programme a été arrêté

- L'objet lancé a été affiché

* Traitement des exceptions

#+BEGIN_SRC c++
  int main()
  {
    Vecteur v(3);
    try
    {
      std::cout << v.get(5) << std::endl;
    }
    catch(const std::out_of_range& exc)
    {
      std::cout << "Exception attrapée : " << exc << std::endl;
    }
    std::cout << "Le programme continue..." << std::endl;
  }
#+END_SRC

- On peut attraper une exception produite dans un bloc =try=

- Le bloc =catch= correspondant est alors exécuté

* Traitement des exceptions

#+BEGIN_SRC c++
  try
  {
    // Code susceptible de générer des exceptions
  }
  catch(const PremierTypeException& exc)
  {
  }
  catch(const SecondTypeException& exc)
  {
  }
#+END_SRC

- Si une exception est générée à l'intérieur du bloc =try= :

  - le premier bloc =catch= correspondant est exécuté,

  - puis l'exécution du programme continue normalement.

- Si aucune exception n'est générée, les blocs =catch= sont ignorés.

- Si une exception n'est pas traitée par un bloc =catch=, elle continue de se
  propager.


* Propagation des exceptions

Lorsqu'une exception est générée, elle remonte la *pile des appels* jusqu'à ce
qu'elle soit attrapée.

- L'exception peut être générée n'importe où, y compris par des fonctions
  appelées indirectement.

#+BEGIN_SRC c++
  void traitement()
  {
    Vecteur v(3);
    v.get(5);
  }
  int main()
  {
    try {
      traitement();
    } catch(const std::out_of_range& exc) {
      std::cout << "exception attrappée : " << exc << std::endl;
    }
  }
#+END_SRC


* Types d'exceptions

Tout type d'objet peut être utilisé comme une exception.

#+BEAMER: \pause

Cependant il est préférable de s'en tenir à des objets dérivés de la classe
=std::exception= (=#include <exception>=).

- Un type d'erreur précis par classe ;

- Utiliser éventuellement une hiérarchie à plusieurs niveaux.


* Types d'exceptions

À titre d'exemple, voici la hiérarchie d'exceptions de la bibliothèque standard
\Cpp (=#include <stdexcept>=).

- =std::exception=

  - =std::logic_error : public std::exception=

    - =std::domain_error : public std::logic_error=

    - =std::invalid_argument : public std::logic_error=

    - =std::length_error : public std::logic_error=

    - =std::out_of_range : public std::logic_error=

    - =std::future_error : public std::logic_error=

  - =std::runtime_error : public std::exception=

    - =std::range_error : public std::runtime_error=

    - =std::overflow_error : public std::runtime_error=

    - =std::underflow_error : public std::runtime_error=

    - =std::system_error : public std::runtime_error=

* Programmer en présence d'exceptions

Tout appel de fonction (ou presque) est susceptible de générer des exceptions.

#+BEAMER: \pause

Cela introduit de très nombreux points d'interruption :

#+BEGIN_SRC c++
  void f()
  {
    A* obj_a = new A;
    B* obj_b = new B;

    ...

    delete obj_b;
    delete obj_a;
  }
#+END_SRC

#+BEAMER: \setbeamercovered{invisible}
#+BEAMER: \pause

- Si le constructeur de =B= lance une exception, l'objet =obj_a= ne sera jamais
  libéré.

#+BEAMER: \setbeamercovered{transparent}
#+BEAMER: \pause

- Les techniques permettant de gérer ces cas sont au-delà du cadre de ce cours,
  elles reposent essentiellement sur les « pointeurs intelligents » (/smart
  pointers/).

* Résumé

- Il est bon de vérifier systématiquement la cohérence des informations
  traitées dans un programme (p. ex. préconditions d'une fonction).

- Pour les tests qui relèvent du débogage les *assertions* sont souvent l'outil
  adapté :

  #+BEGIN_SRC c++
    #include <cassert>
  #+END_SRC

  #+BEGIN_SRC c++
    assert(i < size());
  #+END_SRC

- Pour les erreurs pouvant survenir à l'exécution les *exceptions* sont un
  outil très puissant.

  #+BEGIN_SRC c++
    throw ExceptionClass(parametres);
  #+END_SRC

  #+BEGIN_SRC c++
    try {
      // code
    } catch(const ExceptionClass& exc) {
      // gestion d'exception
    }
  #+END_SRC
