#+TITLE:  Surcharge d'opérateur
#+AUTHOR: Xavier Garrido
#+DATE:   30/09/2013
#+OPTIONS: toc:nil ^:{}
#+STARTUP:     beamer
#+LATEX_CLASS: cpp-slide

* Fonctions et classes amies                                       :noexport:

- Du fait du principe d'encapsulation des données, les fonctions extérieures à
  la classe n'ont pas accès aux membres privées de cette classe...

- ... à l'exception des fonctions amies

- Utilité : quasi nulle sauf pour quelques opérations (dont la surcharge
  d'opérateur)

* Exemple de fonction amie d'une classe                            :noexport:

#+BEGIN_SRC c++
  // Déclaration avec friend
  class particule
  {
    friend void stupid_thing (particule & particule_);
    ...
  };
  ...
  // Définition
  void stupid_thing (particule & particule_)
  {
    particule_.m_mass = 0.511;
  }
  ...
  // Utilisation
  int main ()
  {
    particule my_muon (105.6, -1.6e-19);
    stupid_thing (my_muon);
    // muon $\equiv$ électron ?? wtf !!
  }
#+END_SRC

* Classe amie d'une autre classe                                   :noexport:

- Méthode d'une classe =B=, amie d'une autre classe =A=

  #+BEGIN_SRC c++
    class A
    {
      ...
      friend void B::methode_de_B (A & A_);
      ...
    };
   #+END_SRC

- Classe =B= amie d'une autre classe =A=

  #+BEGIN_SRC c++
    class A
    {
      ...
      friend class B;
      ...
    };
   #+END_SRC

* Surcharge d'opérateur

- \Cpp permet de *surdéfinir les opérateurs* tels que ===, =+==, =++=, =<<=,
  =new=...

- Fondamentalement, l'appel à un opérateur est identique à l'appel d'une
  fonction *\rightarrow possibilité de surdéfinir*

- Le but est de définir ces "fonctions" pour des classes dépourvues de ces
  opérateurs

* Exemple de surcharge de l'opérateur unaire =+==

#+BEGIN_SRC c++
  // Déclaration
  class point
  {
  public:
    point (const double x, const double y);
    double x () const;
    double y () const;
    point & operator+= (const point & point_);

  private:
    double m_x;
    double m_y;
  };
#+END_SRC

* Example de surcharge de l'opérateur unaire =+==

#+BEGIN_SRC c++
  // Déclaration
  class point
  {
    ...
  };

  // Définition
  point & point::operator+= (const point & point_)
  {
    m_x += point_.x ();
    m_y += point_.y ();
    return *this;
  }
#+END_SRC

#+BEGIN_CENTER
*\rightarrow utilisation du pointeur =this= qui retourne* \\
*l'adresse de l'objet courant*
#+END_CENTER

* Exemple de surcharge de l'opérateur unaire =+==

#+BEGIN_SRC c++
  // Définition
  point & point::operator+= (const point & point_)
  {
    m_x += point_.x ();
    m_y += point_.y ();
    return *this;
  }
  ...
  // Utilisation
  int main ()
  {
    point my_point1 (2, 3);
    point my_point2 (4, 5);
    my_point1 += my_point2;
  }
#+END_SRC

* Exemple de surcharge de l'opérateur binaire =+=

#+BEGIN_SRC c++
  // Déclaration
  point operator+ (const point & point1_, const point & point2_);

  // Définition
  point operator+ (const point & point1_, const point & point2_)
  {
    return point (point1_.x () + point2_.x (), point1_.y () + point2_.y ());
  }
  int main ()
  {
    point my_point1 (2, 3);
    point my_point2 (4, 5);
    point my_point3 = my_point1 + my_point2;
  }
#+END_SRC

* Opérateur d'affectation ===

- L'opérateur d'affectation === permet d'affecter une nouvelle valeur à un objet
  *déjà existant*

- Sa surcharge se fait comme pour n'importe quel opérateur

  #+BEGIN_SRC c++
    // Déclaration
    class point
    {
      point & operator= (const point & point_);
    };

    // Utilisation
    point my_point1 (2, 3);
    point my_point2 (3, 4);
    my_point2 = my_point1;
  #+END_SRC

* Opérateur d'affectation ===

- Rien n'empêche d'affecter un objet à lui-même

  #+BEGIN_SRC c++
    Point a;
    a = a;
  #+END_SRC

- Lorsque cette "affectation" risque de corrompre l'objet, utiliser un
  garde-fou :

  #+BEGIN_SRC c++
    // Définition
    point & point::operator= (const point & point_)
    {
      if (&point_ != this) // garde-fou
        {
          m_x = p.x();
          m_y = p.y();
        }
      return *this;
    }
  #+END_SRC

* Constructeur de recopie et opérateur d'affectation ===

- Le constructeur de recopie est la méthode appelée lors de la copie d'un objet
  vers un autre objet du même type

  #+BEGIN_SRC c++
    class point
    {
      point (const point & point_);
    };

    point::point (const point & point_)
    {
      m_x = point_.x ();
      m_y = point_.y ();
    }

    point my_point1 (2, 3);
    point my_point2 = my_point1;
  #+END_SRC

* Constructeur de recopie et opérateur d'affectation ===

- \Cpp fournit par défaut le constructeur par recopie et l'opérateur
  d'affectation === (de même pour le constructeur et le destructeur)

- Lorsque ces versions triviales ne suffisent pas (cas de l'*allocation
  dynamique*) il faut choisir entre deux solutions :

  - Écrire une version correcte,

  - Rendre impossible la copie et l'affectation, en déclarant ces méthodes
    privées, sans les définir :

    #+BEGIN_SRC c++
      class pas_de_copie
      {
      private:
        pas_de_copie (const pas_de_copie&);
        pas_de_copie & operator= (const pas_de_copie&);
      };
    #+END_SRC
