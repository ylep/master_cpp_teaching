#+TITLE:  Structure & Classes
#+AUTHOR: Xavier Garrido
#+DATE:   29/09/2013
#+OPTIONS: toc:nil ^:{}
#+STARTUP:     beamer
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [cpp_teaching, nologo]

* Notion de classe

- Langage objet : analyse du problème en termes *de nature et de structure des
  données* \neq programmation impérative (en C ou fortran) qui relève plus de
  l'aglorithmie

- Une classe est

  1. *une généralisation de la notion de type (=int=, =double=,...)*

  2. *une association de données membres et d'opérations s'y rapportant
     (méthodes ou fonctions membres)*

* Déclaration de classe

- Classe *\rightarrow généralisation de la notion de type* (=int=, =double=,...)

  #+BEGIN_SRC c++
    class Particule
    {
      // Déclaration de membres
      double m_masse;
      double m_charge;
      ...
    };
  #+END_SRC

#+BEAMER: \pause

#+ATTR_LATEX: :options [][][\centering]
#+BEGIN_CBOX
\ding{42} Ne pas oublier le point virgule à la fin de la déclaration
#+END_CBOX

* Déclaration de classe

- Classe *\rightarrow généralisation de la notion de type* (=int=, =double=,...)

  #+BEGIN_SRC c++
    class Particule
    {
      // Déclaration de membres
      double m_masse;
      double m_charge;
      ...
    };
    ...
    // Instanciation d'objets de type Particule
    Particule particule1, particule2;
  #+END_SRC

* Accès aux membres de la classe en \Cpp

- Classe *\rightarrow association de données membres et de méthodes (fonctions
  membres)*

  #+BEGIN_SRC c++
    class Particule
    {
      // Déclaration de membres
      double m_masse;
      double m_charge;

      // Déclaration de méthodes
      void initialise (const double masse_, const double charge_);
      void affiche () const;
    };
  #+END_SRC

* Définition de méthodes de classes

- Identique à la définition d'une fonction mais préfixée du nom de la classe et
  de l'opérateur de portée =::=

  #+BEGIN_SRC c++
    // particule.hh : déclarations
    class Particule
    {
      // Déclaration de membres
      double m_masse;
      double m_charge;

      // Déclaration des méthodes
      void initialise (const double masse_, const double charge_);
      void affiche () const;
    };

    // particule.cc : définitions
    void Particule::initialise (const double masse_, const double charge_)
    {
      m_masse  = masse_;
      m_charge = charge_;
    }
    ...
  #+END_SRC

* Exemple d'utilisation de la classe =Particule=

#+BEGIN_SRC c++
  #include "particule.hh"
  int main ()
  {
    // Instanciation d'objets de type Particule
    Particule particule1, particule2;

    // Accès aux membres
    particule1.initialise (0.511, -1.6e-19);
    particule2.initialise (938.0, +1.6e-19);
  }
#+END_SRC

* Exemple d'utilisation de la classe =Particule=

#+BEGIN_SRC c++
  #include "particule.hh"
  int main ()
  {
    // Instanciation d'objets de type Particule
    Particule * particule1 = new Particule;
    Particule * particule2 = new Particule;

    // Accès aux membres
    particule1->initialise (0.511, -1.6e-19);
    particule2->initialise (938.0, +1.6e-19);

    ...
    delete particule1;
    delete particule2;
  }
#+END_SRC

* Annexes
:PROPERTIES:
:BEAMER_OPT: plain
:BEAMER_ENV: fullframe
:END:

#+BEAMER: \partpage

* Accès aux membres d'une structure

- L'accès aux membres se fait par l'intermédiaire de l'opérateur point =.=

  #+BEGIN_SRC c++
    struct Particule
    {
      // Déclaration de membres
      double m_masse;
      double m_charge;
      ...
    };

    // Instanciation d'objet de type Particule
    Particule particule1, particule2;

    // Accès aux membres
    particule1.m_masse  = 0.511;
    particule1.m_charge = -1.6e-19;

  #+END_SRC
