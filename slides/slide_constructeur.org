#+TITLE:  Constructeur & Destructeur de classe
#+AUTHOR: Xavier Garrido
#+DATE:   29/09/2013
#+OPTIONS: toc:nil ^:{}
#+STARTUP:     beamer
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [cpp_teaching]

* Introduction

- Le constructeur et le destructeur sont deux *méthodes /i.e./ fonctions
  membres* particulières

  - le constructeur est appelé à la création d'un objet,
  - le destructeur est appelé à la destruction d'un objet.

- constructeur \equiv *initialisation des membres* (gestion de l'allocation
  dynamique de mémoire)

- destructeur \equiv *ultimes opérations* (désallocation de la mémoire
  précédemment allouée)

* Constructeur de classe

- Le constructeur est une méthode à part entière (d'où la possibilité de la
  surdéfinir) à ceci près que

  - le constructeur doit porter *le même nom* que la classe,

  - le constructeur ne doit avoir *aucun type* de retour.

* Déclaration de constructeurs

#+BEGIN_SRC c++
  class Particule
  {
  public:
    // Constructeur par défaut
    Particule ();

    // Surdéfinition de constructeur
    Particule (const double masse_, const double charge_);

  private:
    // Déclaration de membres
    double m_masse;
    double m_charge;
  };
#+END_SRC

* Définition de constructeurs

#+BEGIN_SRC c++
  #include "particule.h"

  // Initialisation des membres à une valeur par défaut
  Particule::Particule ()
    : m_masse (0.0), m_charge (0.0)
  {
  }

  Particule::Particule (const double masse_, const double charge_)
    : m_masse (masse_), m_charge (charge_)
  {
  }
  ...
  Particule my_particule1; // Constructeur par défaut
  Particule my_particule2 (0.511, 1.6e-19);
#+END_SRC

* Destructeur de classe

- Le destructeur est également une méthode à ceci près que

  - le destructeur doit porter *le même nom* que la classe *préfixé du signe
    =~=*,

  - le destructeur *ne possède pas d'argument*; il n'est donc pas possible de
    surdéfinir cette méthode.

- Lors d'allocation dynamique de mémoire, la présence d'un destructeur est
  obligatoire[fn:1]

[fn:1] c'est également le cas pour l'héritage

* Déclaration de destructeur

#+BEGIN_SRC c++
  class Particule
  {
    public:
    // Constructeur par défaut
    Particule ();

    // Destructeur
    ~Particule ();

    private:
    // Déclaration de membres
    char * m_nom;
  };
#+END_SRC

* Définition de destructeur

#+BEGIN_SRC c++
  #include "particule.h"

  // Initialisation
  Particule::Particule ()
    : m_nom (new char[256])
  {
  }

  // Destruction
  Particule::~Particule ()
  {
    delete[] m_nom;
  }
#+END_SRC
