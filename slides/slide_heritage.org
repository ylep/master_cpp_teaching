#+TITLE:  Héritage
#+AUTHOR: Xavier Garrido
#+DATE:   29/09/2013
#+OPTIONS: toc:nil ^:{}
#+STARTUP:     beamer
#+LATEX_CLASS: cpp-slide

* Notion d'héritage

- L'héritage est un nouveau moyen de faire interagir les classes entre elles par
  le biais de *relations hiérarchiques*

#+BEGIN_SRC latex
  \begin{center}
    \begin{tikzpicture}[
        grow=down,
        linet/.style={very thick,draw=blue!60,
          shorten >=0pt, shorten <=0pt, ->},
        punkt/.style={rectangle, rounded corners, shade, top color=white,
          bottom color=blue!10, draw=blue!60, very thick,
          text centered, text width=12em}
      ]
      \ttfamily\color{blue}
      \path (0,0)    node(a) [punkt] {class Mère (Polygone)}
            (0,-1.5) node(b) [punkt] {class Fille (Rectangle)};
      \draw[linet] (a) -- (b);
    \end{tikzpicture}
  \end{center}
#+END_SRC

* Notion d'héritage

#+BEGIN_SRC latex
  \begin{center}
    \begin{tikzpicture}[
        grow=down,
        linet/.style={very thick,draw=blue!60,
          shorten >=0pt, shorten <=0pt, ->},
        punkt/.style={rectangle, rounded corners, shade, top color=white,
          bottom color=blue!10, draw=blue!60, very thick,
          text centered, text width=12em}
      ]
      \ttfamily\color{blue}
      \path (0,0)    node(a) [punkt] {class Mère (Polygone)}
      (0,-1.5) node(b) [punkt] {class Fille (Rectangle)};
      \draw[linet] (a) -- (b);
    \end{tikzpicture}
  \end{center}
#+END_SRC

- La classe =Fille= hérite de tous les attributs de =Mère= (données et
  méthodes)

#+BEAMER: \pause

- La classe =Fille= peut également ajouter de nouveaux membres ainsi que de
  nouvelles méthodes qui lui sont propres :

  - [\rightarrow] la *classe mère* ou *classe de base* est une *généralisation*
    de =Fille=,

  - [\rightarrow] la *classe fille* ou *classe dérivée* est une
    *spécialisation* de sa classe de base =Mère=.


* Héritage : syntaxe

#+BEGIN_SRC c++
  class Polygone
  {
  public:
    Polygone(unsigned int nombre_segments);
  private:
    unsigned int m_nombre_segment;
  };

  class Rectangle : public Polygone
  {
  public:
    void set_largeur(double largeur);

  private:
    double m_longueur;
    double m_largeur;
  };
#+END_SRC

#+BEAMER: \pause
- La relation d'héritage est implémentée par la syntaxe *=: public Polygone=*


* Appels des constructeurs et destructeurs

#+BEGIN_SRC c++
  class Polygone
  {
  public:
    Polygone(const unsigned int nbr_segment)
      : m_nombre_segment(nbr_segment) {}
  private:
    unsigned int m_nombre_segment;
  };

  class Rectangle : public Polygone
  {
  public:
    Rectangle(const double longueur, const double largeur)
      : Polygone(4),
        m_longueur(longueur), m_largeur(largeur) {}
  };
#+END_SRC

* Appels des constructeurs et destructeurs

- À la construction d'un objet de la classe dérivée, le constructeur de la
  classe de base est appelé *_avant_* celui de la classe dérivée

- Lors de la destruction de cet objet, le destructeur de la classe de base est
  appelé automatiquement *_après_* le destructeur de la classe dérivée


* Statut des membres et méthodes de classe

- =private= :: les membres ne sont accessibles qu'aux méthodes de la classe.
- =protected= :: les membres sont accessibles aux méthodes de la classe de base
                 ainsi qu'aux classes dérivées. Ils demeurent toutefois
                 inaccessibles à l'utilisateur de la classe, tout comme les
                 membres privés.
- =public= :: les membres sont toujours accessibles.


* Relations entre classes

Il faut bien distinguer les deux liens logiques que sont la composition et
l'héritage:

- Composition :: relation de type *_possède un_*; un =Polygone= possède un
                 ensemble de =Point= ;
- Héritage :: relation de type *_est un_*; un =Rectangle= est un =Polygone=.


* Conception d'un programme

Pour concevoir un programme orienté objet, le développeur procède de la façon
suivante :

1. *Faire l'inventaire* des objets nécessaires à la description du problème ;

2. *Décider des liens logiques* entre ces objets (composition, héritage) ;

3. *Implémenter* ces objets /i.e./ déclarer les méthodes puis les définir ;

4. *Créer* des instances de ces objets et *utiliser* leurs méthodes pour
   répondre au problème posé.
