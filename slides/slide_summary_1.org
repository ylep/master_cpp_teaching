#+TITLE:  Résumé sur les spécificités du C++ hors POO
#+AUTHOR: Xavier Garrido
#+DATE:   29/09/2013
#+OPTIONS: toc:nil ^:{}
#+STARTUP:     beamer
#+LATEX_CLASS: cpp-slide

#+COMMENT: Special latex tweaks for these slides
#+BEGIN_SRC latex
  \tikzexternaldisable
  \def\theFancyVerbLine{%
    \color{white}\sffamily\tiny\arabic{FancyVerbLine}%
          {\tikz[remember picture,overlay]\node(minted-\arabic{FancyVerbLine}){};}%
  }
  \tikzset{codeblock/.style={color=#1!50,rounded corners=0.5ex, opacity=0.2, fill}}
#+END_SRC

* Principales notions

- Le \Cpp introduit la notion de référence afin de faciliter la manipulation des
  variables notamment au sein des fonctions

  #+BEGIN_CENTER
  *\rightarrow transmission des arguments par référence*
  #+END_CENTER

#+BEAMER: \pause

- En \Cpp plusieurs fonctions peuvent porter le même nom dès lors qu'elles n'ont
  pas le même contexte d'appel

  #+BEGIN_CENTER
  *\rightarrow surdéfinition ou surcharge de fonction*
  #+END_CENTER

#+BEAMER: \pause

- Les macros telles qu'utilisées en C sont à éviter (/cf./ [[http://www.parashift.com/c++-faq/inline-vs-macros.html][evil#1]], [[http://www.parashift.com/c++-faq/macros-with-if.html][evil#2]],
  [[http://www.parashift.com/c++-faq/macros-with-multi-stmts.html][evil#3]], [[http://www.parashift.com/c++-faq/macros-with-token-pasting.html][evil#4]]). Les seules véritables directives de préprocesseur à
  utiliser sont *=#include=, =#ifndef= / =#define=*

  #+BEGIN_CENTER
  *\rightarrow compilation séparée*
  #+END_CENTER

* Transmission par référence
:PROPERTIES:
:BEAMER_ENV: fullframe
:END:

** =dummy.h=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #ifndef __dummy_h__
  #define __dummy_h__ 1
  void dummy ();
  void dummy (int i_);
  void dummy (int & i_, double & a_, char & c_);
  #endif
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  void dummy () {}
  void dummy (int i_) {}
  void dummy (int & i_, double & a_, char & c_) {}
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =test_dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  int main ()
  {
    dummy ();
    int i = 10; double a = 2.0; char c = 'a';
    dummy (i, a, c);
  }
#+END_SRC

* Transmission par référence
:PROPERTIES:
:BEAMER_ENV: fullframe
:END:

#+ATTR_LATEX: :options [6][lbtuc][\centering][9][1]
#+BEGIN_CBOX
Transmission par référence
#+END_CBOX

** =dummy.h=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #ifndef __dummy_h__
  #define __dummy_h__ 1
  void dummy ();
  void dummy (int i_);
  void dummy (int & i_, double & a_, char & c_);
  #endif
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=blue]
    ([yshift=-0.75ex,xshift= 2ex]minted-5) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-5);
    \node[] () [xshift=+6.6cm, yshift=+0.4ex, right=of minted-5.east]
         {\textcolor{blue}{\scriptsize Déclaration de la fonction}};
  \end{tikzpicture}
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  void dummy () {}
  void dummy (int i_) {}
  void dummy (int & i_, double & a_, char & c_) {}
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=blue]
    ([yshift=-0.75ex,xshift= 2ex]minted-4) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-4);
    \node[] () [xshift=+6.6cm, yshift=+0.4ex, right=of minted-4.east]
         {\textcolor{blue}{\scriptsize Définition de la fonction}};
  \end{tikzpicture}
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =test_dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  int main ()
  {
    dummy ();
    int i = 10; double a = 2.0; char c = 'a';
    dummy (i, a, c);
  }
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=blue]
    ([yshift=-0.75ex,xshift= 2ex]minted-6) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-6);
    \node[] () [xshift=+6.6cm, yshift=+0.4ex, right=of minted-6.east]
         {\textcolor{blue}{\scriptsize Appel de la fonction}};
  \end{tikzpicture}
#+END_SRC
* Surdéfinition de fonction
:PROPERTIES:
:BEAMER_ENV: fullframe
:END:

#+ATTR_LATEX: :options [6][lgtuc][\centering][9][1]
#+BEGIN_CBOX
Surdéfinition de fonction
#+END_CBOX

** =dummy.h=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #ifndef __dummy_h__
  #define __dummy_h__ 1
  void dummy ();
  void dummy (int i_);
  void dummy (int & i_, double & a_, char & c_);
  #endif
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=green]
    ([yshift=-0.75ex,xshift= 2ex]minted-5) rectangle
    ([yshift=+6.00ex,xshift=43ex]minted-5);
    \node[] () [xshift=+6.6cm, yshift=+0.4ex, right=of minted-4.east]
         {\textcolor{green}{\scriptsize Déclaration des fonctions}};
  \end{tikzpicture}
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  void dummy () {}
  void dummy (int i_) {}
  void dummy (int & i_, double & a_, char & c_) {}
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=green]
    ([yshift=-0.75ex,xshift= 2ex]minted-4) rectangle
    ([yshift=+6.00ex,xshift=43ex]minted-4);
    \node[] () [xshift=+6.6cm, yshift=+0.4ex, right=of minted-3.east]
         {\textcolor{green}{\scriptsize Définition des fonctions}};
  \end{tikzpicture}
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =test_dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  int main ()
  {
    dummy ();
    int i = 10; double a = 2.0; char c = 'a';
    dummy (i, a, c);
  }
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=green]
    ([yshift=-0.75ex,xshift= 2ex]minted-4) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-4);
    \draw[codeblock=green]
    ([yshift=-0.75ex,xshift= 2ex]minted-6) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-6);
    \node[] (t) [xshift=+6.6cm, yshift=+0.4ex, right=of minted-5.east]{
      \textcolor{green}{\scriptsize Appel des fonctions}};
    \draw[->, green] (t.west) to [out=180, in=0]
    ([xshift=42.5ex, yshift=+0.4ex]minted-4.east);
    \draw[->, green] (t.west) to [out=180, in=0]
    ([xshift=42.5ex, yshift=+0.4ex]minted-6.east);
  \end{tikzpicture}
#+END_SRC
* Directives de préprocesseur
:PROPERTIES:
:BEAMER_ENV: fullframe
:END:

#+ATTR_LATEX: :options [6][lotuc][\centering][9][14]
#+BEGIN_CBOX
Directives de préprocesseur
#+END_CBOX

** =dummy.h=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #ifndef __dummy_h__
  #define __dummy_h__ 1
  void dummy ();
  void dummy (int i_);
  void dummy (int & i_, double & a_, char & c_);
  #endif
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=orange]
    ([yshift=-0.75ex,xshift= 2ex]minted-2) rectangle
    ([yshift=+3.75ex,xshift=43ex]minted-2);
    \draw[codeblock=orange]
    ([yshift=-0.75ex,xshift= 2ex]minted-6) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-6);
  \end{tikzpicture}
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  void dummy () {}
  void dummy (int i_) {}
  void dummy (int & i_, double & a_, char & c_) {}
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=orange]
    ([yshift=-0.75ex,xshift= 2ex]minted-1) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-1);
  \end{tikzpicture}
#+END_SRC

#+BEAMER: \vspace{-0.7cm}

** =test_dummy.cc=
:PROPERTIES:
:BEAMER_ENV: cbox
:BEAMER_OPT: [][lwuc]
:END:
#+BEGIN_SRC c++ -n
  #include "dummy.h"
  int main ()
  {
    dummy ();
    int i = 10; double a = 2.0; char c = 'a';
    dummy (i, a, c);
  }
#+END_SRC
#+BEGIN_SRC latex
  \begin{tikzpicture}[remember picture,overlay]
    \draw[codeblock=orange]
    ([yshift=-0.75ex,xshift= 2ex]minted-1) rectangle
    ([yshift=+1.50ex,xshift=43ex]minted-1);
  \end{tikzpicture}
#+END_SRC

* Compilation

#+BEGIN_PROMPT
g++ dummy.cc test_dummy.cc -o test_dummy.exe
#+END_PROMPT

#+ATTR_LATEX: :options [][][\centering]
#+BEGIN_CBOX
\ding{42} Les fichiers d'en-tête ne sont jamais compilés !
#+END_CBOX

* Pourquoi tant de fichiers ?
:PROPERTIES:
:BEAMER_ACT: [<+->]
:END:

1. *Protection du code source :* un utilisateur \lambda n'a besoin que de la
   déclaration de la fonction /i.e./ le fichier =dummy.h= et du fichier objet
   associé /i.e./ =dummy.o=.

2. *Temps de compilation :* seuls les fichiers sources /i.e./ =*.cc= modifiés,
   doivent être recompilés.

3. *Structure & accès du code :* à terme chaque structure/classe nouvellement
   crée se verra associer deux fichiers, sa déclaration et sa définition, ainsi
   qu'un programme =test=.
